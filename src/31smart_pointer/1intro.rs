///* 指针 （pointer）是一个包含内存地址的变量的通用概念。这个地址引用，或 “指向”（points at）一些其他数据。
// Rust 中表现为引用

///* 智能指针（smart pointers）是一类数据结构，他们的表现类似指针，但是也拥有额外的元数据和功能
// 引用计数 （reference counting）智能指针类型，其允许数据有多个所有者。引用计数智能指针记录总共有多少个所有者，并当没有任何所有者时负责清理数据。

///* 在 Rust 中，普通引用和智能指针的一个额外的区别是引用是一类只借用数据的指针；相反，在大部分情况下，智能指针 拥有 他们指向的数据。


///* 智能指针的例子
// String 和 Vec<T> 都属于智能指针 因为它们拥有一些数据并允许你修改它们
// 它们也带有元数据（比如他们的容量）和额外的功能或保证（String 的数据总是有效的 UTF-8 编码）。


///* 智能指针的实现
// 通常使用结构体实现。智能指针区别于常规结构体的显著特性在于其实现了 Deref 和 Drop trait
// * Deref trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既用于引用、又用于智能指针的代码
// * Drop trait 允许我们自定义当智能指针离开作用域时运行的代码

///* 常见智能指针
// - Box<T>，用于在堆上分配值
// - Rc<T>，一个引用计数类型，其数据可以有多个所有者
// - Ref<T> 和 RefMut<T>，通过 RefCell<T> 访问。（ RefCell<T> 是一个在运行时而不是在编译时执行借用规则的类型）。
// *内部可变性（interior mutability）模式，这是不可变类型暴露出改变其内部值的 API。
// 引用循环（reference cycles）会如何泄漏内存，以及如何避免。